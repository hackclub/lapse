generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionLevel {
  USER
  ADMIN
  ROOT
}

enum TimelapsePrivacy {
  UNLISTED
  PUBLIC
}

enum VideoContainerKind {
  WEBM
  MP4
}

/// Represents a device with an encryption passkey that is unknown to the server.
model KnownDevice {
  id      String        @id @default(uuid())
  name    String

  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id])

  /// The timelapses created on this device.
  timelapses    Timelapse[]
}

/// Represents a single user of Lapse.
model User {
  id                String            @id @default(uuid())
  email             String
  createdAt         DateTime          @default(now())
  permissionLevel   PermissionLevel   @default(USER)
  handle            String            @unique
  displayName       String
  bio               String            @default("")
  urls              String[]          @default([])
  hackatimeApiKey   String?
  slackId           String?

  timelapses        Timelapse[]
  devices           KnownDevice[]
}

model Timelapse {
  /// The unique ID of the timelapse.
  id                    String              @id @default(uuid())

  /// The S3 key that points to the object. If `isPublished` is `false`, this refers to the
  /// encrypted bucket - otherwise, the public bucket.
  s3Key                 String

  /// The Hackatime project key associated with the timelapse. If `null`, the timelapse has not
  /// yet been synchronized with Hackatime.
  hackatimeProject      String?

  /// The name (title) of the timelapse.
  name                  String

  /// The description of the timelapse.
  description           String              @default("")

  /// If `isPublished` is `true`, specifies whether the timelapse can only be accessed via its URL.
  privacy               TimelapsePrivacy    @default(UNLISTED)

  /// Determines whether the timelapse is decrypted and can be accessed by users other than the owner.
  isPublished           Boolean             @default(false)

  /// The container type used to store the video.
  containerKind         VideoContainerKind

  ownerId               String
  owner                 User                @relation(fields: [ownerId], references: [id])

  deviceId              String
  device                KnownDevice         @relation(fields: [deviceId], references: [id])

  snapshots             Snapshot[]
}

/// Represents a single frame in a `TimelapseSegment`.
model Snapshot {
  id              String              @id @default(uuid())
  frame           Int
  createdAt       DateTime

  timelapseId       String
  timelapse         Timelapse    @relation(fields: [timelapseId], references: [id])
}
