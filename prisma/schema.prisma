generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PermissionLevel {
  USER
  ADMIN
  ROOT
}

enum TimelapseVisibility {
  UNLISTED
  PUBLIC
}

enum VideoContainerKind {
  WEBM
  MP4
}

/// Represents a device with an encryption passkey that is unknown to the server.
model KnownDevice {
  id      String        @id @default(uuid())
  name    String

  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id])

  /// The timelapses created on this device.
  timelapses    Timelapse[]
}

/// Represents a single user of Lapse.
model User {
  id                        String            @id @default(nanoid(12))
  email                     String
  createdAt                 DateTime          @default(now())
  permissionLevel           PermissionLevel   @default(USER)
  handle                    String            @unique
  displayName               String
  profilePictureUrl         String
  bio                       String            @default("")
  urls                      String[]          @default([])
  hackatimeApiKey           String?
  knownSlackId              String?
  slackId                   String?

  timelapses            Timelapse[]
  devices               KnownDevice[]
  uploadTokens          UploadToken[]
  draftTimelapses       DraftTimelapse[]
}

/// Represents a timelapse that has not yet been uploaded to the server.
model DraftTimelapse {
  /// The unique ID of the timelapse.
  id                    String    @id @default(nanoid(12))

  ownerId               String
  owner                 User          @relation(fields: [ownerId], references: [id])

  videoTokenId          String        @unique
  videoToken            UploadToken   @relation("DraftTimelapseVideoToken", fields: [videoTokenId], references: [id], onDelete: Cascade)

  thumbnailTokenId      String        @unique
  thumbnailToken        UploadToken   @relation("DraftTimelapseThumbnailToken", fields: [thumbnailTokenId], references: [id], onDelete: Cascade)
}

/// Represents active upload tokens. A token is considered "used" when the client uploads a resource
/// represented by the token, *and* consumes it via an API endpoint. When a token is used, it is
/// deleted from this model. If a token reaches its expiry date before it's used, it will be deleted,
/// and if an S3 object has been uploaded (but not used), it will be irreversibly removed.
model UploadToken {
  /// The unique ID of the token, shared with the client.
  id        String      @id @default(uuid())

  /// The S3 key that points to the object.
  key       String

  /// The name of the target bucket.
  bucket    String

  /// The MIME type for the S3 upload.
  mimeType  String

  /// `true` if `/api/upload` has been called on this token, and an S3 resource under
  /// `key` and `bucket` exists and is associated with this token.
  uploaded  Boolean     @default(false)

  /// The time at which the token expires. After a token expires, it is considered "stale" -
  /// it cannot be used by the owner, and it, alongside its associated S3 object, is subject
  /// to deletion at any time.
  expires   DateTime

  /// The file size limit for this upload, in bytes.
  maxSize   Int

  /// The ID of the user that this token has been issued to. Only this user can use this token.
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id])

  /// If this token is used for a draft timelapse video stream, this field points to said timelapse.
  asVideoToken        DraftTimelapse?   @relation("DraftTimelapseVideoToken")

  /// If this token is used in a draft timelapse thumbnail, this field points to said timelapse.
  asThumbnailToken    DraftTimelapse?   @relation("DraftTimelapseThumbnailToken")
}

model Timelapse {
  /// The unique ID of the timelapse.
  id                    String                  @id @default(nanoid(12))

  /// The S3 key that points to the object. If `isPublished` is `false`, this refers to the
  /// encrypted bucket - otherwise, the public bucket.
  s3Key                 String

  /// The S3 key that points to the thumbnail image. If `isPublished` is `false`, this refers to the
  /// encrypted bucket - otherwise, the public bucket. If `null`, no thumbnail has been generated yet.
  thumbnailS3Key        String?

  /// The Hackatime project key associated with the timelapse. If `null`, the timelapse has not
  /// yet been synchronized with Hackatime.
  hackatimeProject      String?

  /// The name (title) of the timelapse.
  name                  String

  /// The description of the timelapse.
  description           String                  @default("")

  /// If `isPublished` is `true`, specifies whether the timelapse can only be accessed via its URL.
  visibility            TimelapseVisibility     @default(UNLISTED)

  /// Determines whether the timelapse is decrypted and can be accessed by users other than the owner.
  isPublished           Boolean                 @default(false)

  /// The container type used to store the video.
  containerKind         VideoContainerKind

  ownerId               String
  owner                 User                @relation(fields: [ownerId], references: [id])

  deviceId              String?
  device                KnownDevice?        @relation(fields: [deviceId], references: [id])

  snapshots             Snapshot[]
}

/// Represents a single frame in a `TimelapseSegment`.
model Snapshot {
  id              String              @id @default(uuid())
  frame           Int
  createdAt       DateTime
  heartbeatId     Int                 @default(0)

  timelapseId       String
  timelapse         Timelapse    @relation(fields: [timelapseId], references: [id])
}
